<?php

use LithiumHosting\WebApps\MediaWiki\Handler;
use Module\Support\Webapps;
use Module\Support\Webapps\PhpWrapper;
use Module\Support\Webapps\DatabaseGenerator;
use Module\Support\Webapps\VersionFetcher\Github;
use Opcenter\Auth\Password;
use Opcenter\Map;
use Opcenter\Provisioning\ConfigurationWriter;
use Opcenter\SiteConfiguration;
use Opcenter\Versioning;

/**
 * MediaWiki management
 *
 * @package core
 */
class MediaWiki_Module extends Webapps
{
	const REGISTERED_HANDLER_KEY = 'webapps.mediawiki';
	const APP_NAME = Handler::NAME;
	const DEFAULT_VERSION_LOCK = 'minor';

	protected $aclList = [
		'min' => [],
		'max' => [],
	];

	/**
	 * Install MediaWiki into a pre-existing location
	 *
	 * @param string $hostname domain or subdomain to install MediaWiki
	 * @param string $path     optional path under hostname
	 * @param array  $opts     additional install options
	 * @return bool
	 */
	public function install(string $hostname, string $path = '', array $opts = []): bool
	{
		if (!version_compare($this->php_version(), '7', '>=')) {
			return error('MediaWiki requires PHP7.2 or higher, PHP8+ is recommended');
		}

		if (!($docroot = $this->getDocumentRoot($hostname, $path))) {
			return error("failed to normalize path for `%s'", $hostname);
		}

		if (!$this->parseInstallOptions($opts, $hostname, $path)) {
			return false;
		}

		$args['version'] = $opts['version'];

		$oldex = Error_Reporter::exception_upgrade(Error_Reporter::E_ERROR);
		$approot = $this->getAppRoot($hostname, $path);
		try {
			$this->downloadVersion($approot, $args['version']);

//			$db = DatabaseGenerator::mysql($this->getAuthContext(), $hostname);
//			$db->connectionLimit = max($db->connectionLimit, 15);
//			if (! $db->create()) {
//				return false;
//			}
			if (! isset($opts['password'])) {
				$opts['password'] = $password = Password::generate();
				info("autogenerated password `%s'", $password);
			}

		} catch (apnscpException $e) {
			$this->file_delete($approot, true);

			return error('Failed to install %s: %s', static::APP_NAME, $e->getMessage());
		} finally {
			Error_Reporter::exception_upgrade($oldex);
		}

		$this->initializeMeta($docroot, $opts);

//		$this->fortify($hostname, $path, Handler::DEFAULT_FORTIFICATION);
		$this->notifyInstalled($hostname, $path, $opts);

		return info('%(app)s installed - confirmation email with login info sent to %(email)s',
			['app' => static::APP_NAME, 'email' => $opts['email']]);
	}

	/**
	 * Get all available MediaWiki versions
	 *
	 * @return array
	 */
	public function get_versions(): array
	{
		$versions = $this->_getVersions();

		return array_column(array_filter($versions, static function ($meta) {
			return false === strpos($meta['version'], '-');
		}), 'version');
	}

	/**
	 * Get all current major versions
	 *
	 * @return array
	 */
	private function _getVersions(): array
	{
		$key = 'mediawiki.versions';
		$cache = Cache_Super_Global::spawn();
		if (false !== ($ver = $cache->get($key))) {
			return (array)$ver;
		}
		$versions = (new Github)->setMode('tags')->fetch('wikimedia/mediawiki');

		$cache->set($key, $versions, 43200);

		return $versions;
	}

	/**
	 * Release meta
	 *
	 * @param string $version
	 * @return array|null
	 */
	private function versionMeta(string $version): ?array
	{
		return array_first($this->_getVersions(), static function ($meta) use ($version) {
			return $meta['name'] === $version;
		});
	}

	/**
	 * Get installed version
	 *
	 * @param string $hostname
	 * @param string $path
	 * @return string version number
	 */
	public function get_version(string $hostname, string $path = ''): ?string
	{
		$approot = $this->getAppRoot($hostname, $path);

		if (!$this->valid($hostname, $path)) {
			return null;
		}

		$ret = PhpWrapper::instantiateContexted($this->getAuthContextFromDocroot($approot))->exec($approot, 'console core:version');
		if (!$ret['success']) {
			return null;
		}

		return trim($ret['stdout']);
	}

	/**
	 * Location is a valid MediaWiki install
	 *
	 * @param string $hostname or $docroot
	 * @param string $path
	 * @return bool
	 */
	public function valid(string $hostname, string $path = ''): bool
	{
		if ($hostname[0] === '/') {
			$approot = $hostname;
		} else {
			$approot = $this->getAppRoot($hostname, $path);
			if (!$approot) {
				return false;
			}
		}
		return $this->file_exists($approot . '/includes/MediaWiki.php');
	}

	/**
	 * Extract remote MediaWiki version into directory
	 *
	 * @param string $approot
	 * @param string $version
	 * @return bool
	 */
	private function downloadVersion(string $approot, string $version): bool
	{
		if (null === ($meta = $this->versionMeta($version))) {
			return error("Cannot locate %(app)s version %(version)s", [
				'app'     => self::APP_NAME,
				'version' => $version
			]);
		}

		$this->download($meta['zipball_url'], "$approot/", true, "mediawiki-$version.zip");

		$filelist = $this->file_get_directory_contents($approot);
		if (false !== strpos($filelist[0]['filename'], 'wikimedia-mediawiki'))
		{
			$this->file_copy("$approot/{$filelist[0]['filename']}/", $approot) && $this->file_delete("$approot/{$filelist[0]['filename']}", true);
			return true;
		}
		return error("Could not process downloaded archive, please try again", [
			'app'     => self::APP_NAME,
			'version' => $version
		]);
	}
}