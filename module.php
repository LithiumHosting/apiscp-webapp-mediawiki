<?php

use Illuminate\Support\Str;
use LithiumHosting\WebApps\MediaWiki\Handler;
use Module\Support\Webapps;
use Module\Support\Webapps\ComposerWrapper;
use Module\Support\Webapps\PhpWrapper;
use Module\Support\Webapps\DatabaseGenerator;
use Module\Support\Webapps\VersionFetcher\Github;
use Opcenter\Auth\Password;
use Opcenter\Map;
use Opcenter\Provisioning\ConfigurationWriter;
use Opcenter\SiteConfiguration;

/**
 * MediaWiki management
 *
 * @package core
 */
class MediaWiki_Module extends Webapps
{
	const APP_NAME               = Handler::NAME;
	const DEFAULT_VERSION_LOCK   = 'minor';

	protected $aclList = [
		'min' => [],
		'max' => [],
	];

	/**
	 * Install MediaWiki into a pre-existing location
	 *
	 * @param  string  $hostname  domain or subdomain to install MediaWiki
	 * @param  string  $path      optional path under hostname
	 * @param  array   $opts      additional install options
	 *
	 * @return bool
	 */
	public function install(string $hostname, string $path = '', array $opts = []): bool
	{
		if (! version_compare($this->php_version(), '7', '>=')) {
			return error('MediaWiki requires PHP7.3 or higher, PHP8+ is recommended');
		}

		if (! ($docroot = $this->getDocumentRoot($hostname, $path))) {
			return error("failed to normalize path for `%s'", $hostname);
		}

		if (! $this->parseInstallOptions($opts, $hostname, $path)) {
			return false;
		}

		$args['version'] = $opts['version'];

		$oldex = Error_Reporter::exception_upgrade(Error_Reporter::E_ERROR);
		$approot = $this->getAppRoot($hostname, $path);

		try {
			$this->downloadVersion($approot, $args['version']);

			$db = DatabaseGenerator::mysql($this->getAuthContext(), $hostname);
			$db->connectionLimit = max($db->connectionLimit, 15);
			if (! $db->create()) {
				return false;
			}
			if (! isset($opts['password'])) {
				$opts['password'] = $password = Password::generate();
				info("autogenerated password `%s'", $password);
			}

			$opts['email'] ?? $this->common_get_email();

			$wikiServer = $opts['ssl'] ? 'https://' : 'http://'.$hostname;

			// https://www.mediawiki.org/wiki/Manual:Install.php
			$installCommand = "cd %(path)s && php maintenance/install.php \
			--dbserver {$db->hostname} \
			--dbname {$db->database} \
			--dbuser {$db->username} \
			--dbpass {$db->password} \
			--installdbuser {$db->username} \
			--installdbpass {$db->password} \
			--pass {$opts['password']} \
			--server {$wikiServer} \
			--scriptpath \"\" \
			\"My Wiki\" wikiadmin";

			$ret = $this->pman_run($installCommand, [
				'path' => $approot
			]);

			if (! $ret['success']) {
				return error("failed to install %(app)s: %(err)s", [
					'app' => static::APP_NAME,
					'approot' => $approot,
					'err' => $ret['stderr']
				]);
			}
		} catch (apnscpException $e) {
			$this->file_delete($approot, true);

			return error('Failed to install %s: %s', static::APP_NAME, $e->getMessage());
		} finally {
			Error_Reporter::exception_upgrade($oldex);
		}

		$this->initializeMeta($docroot, $opts);

//		$this->fortify($hostname, $path, Handler::DEFAULT_FORTIFICATION);
		$this->notifyInstalled($hostname, $path, $opts);

		return info('%(app)s installed - confirmation email with login info sent to %(email)s',
			['app' => static::APP_NAME, 'email' => $opts['email']]);
	}

	/**
	 * Get all available MediaWiki versions
	 *
	 * @return array
	 */
	public function get_versions(): array
	{
		$versions = $this->_getVersions();

		return array_column(array_filter($versions, static function($meta) {
			return false === strpos($meta['version'], '-');
		}), 'version');
	}

	/**
	 * Get all current major versions
	 *
	 * @return array
	 */
	private function _getVersions(): array
	{
		$key = 'mediawiki.versions';
		$cache = Cache_Super_Global::spawn();
		if (false !== ($ver = $cache->get($key))) {
			return (array) $ver;
		}
		$versions = (new Github)->setMode('tags')->fetch('wikimedia/mediawiki');

		$cache->set($key, $versions, 43200);

		return $versions;
	}

	/**
	 * Release meta
	 *
	 * @param  string  $version
	 *
	 * @return array|null
	 */
	private function versionMeta(string $version): ?array
	{
		return array_first($this->_getVersions(), static function($meta) use ($version) {
			return $meta['name'] === $version;
		});
	}

	/**
	 * Get installed version
	 *
	 * @param  string  $hostname
	 * @param  string  $path
	 *
	 * @return string version number
	 */
	public function get_version(string $hostname, string $path = ''): ?string
	{
		$approot = $this->getAppRoot($hostname, $path);

		if (! $this->valid($hostname, $path)) {
			return null;
		}

		$ret = PhpWrapper::instantiateContexted($this->getAuthContextFromDocroot($approot))->exec($approot, 'console core:version');
		if (! $ret['success']) {
			return null;
		}

		return trim($ret['stdout']);
	}

	/**
	 * Location is a valid MediaWiki install
	 *
	 * @param  string  $hostname  or $docroot
	 * @param  string  $path
	 *
	 * @return bool
	 */
	public function valid(string $hostname, string $path = ''): bool
	{
		if ($hostname[0] === '/') {
			$approot = $hostname;
		} else {
			$approot = $this->getAppRoot($hostname, $path);
			if (! $approot) {
				return false;
			}
		}
		return $this->file_exists($approot.'/includes/MediaWiki.php');
	}

	/**
	 * @inheritdoc
	 */
	public function db_config(string $hostname, string $path = '')
	{
		$approot = $this->getAppRoot($hostname, $path);
		if (! $this->file_exists($approot.'/LocalSettings.php')) {
			return false;
		}

		$code = 'ob_start(); function wfLoadSkin() {}; define(\'MEDIAWIKI\', TRUE); include("./LocalSettings.php"); file_put_contents("php://fd/3", serialize(["db" => $wgDBname, "user" => $wgDBuser, "host" => $wgDBserver, "prefix" => $wgDBprefix, "password" =>  $wgDBpassword])); ';
		$cmd = 'cd %(path)s && php -d mysqli.default_socket=%(socket)s -r %(code)s 3>&1-';
		$ret = $this->pman_run($cmd, [
			'path' => $approot,
			'code' => $code,
			'socket' => ini_get('mysqli.default_socket')
		]);

		if (! $ret['success']) {
			return error("failed to obtain %(app)s configuration for `%(approot)s': %(err)s", [
				'app' => static::APP_NAME,
				'approot' => $approot,
				'err' => $ret['stderr']
			]);
		}

		return \Util_PHP::unserialize(trim($ret['stdout']));
	}

	/**
	 * Extract remote MediaWiki version into directory
	 *
	 * @param  string  $approot
	 * @param  string  $version
	 *
	 * @return bool
	 */
	private function downloadVersion(string $approot, string $version): bool
	{
		$minor = \Opcenter\Versioning::asMinor($version);

		$this->download("https://releases.wikimedia.org/mediawiki/$minor/mediawiki-$version.zip", $approot);

		$this->file_copy("$approot/mediawiki-$version/", $approot) && $this->file_delete("$approot/mediawiki-$version", true);
		return true;
	}
}